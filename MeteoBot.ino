
/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */
#define WIFI_SSID               "SSID"            //–ò–º—è WiFi —Å–µ—Ç–∏
#define WIFI_PASSWORD           "PASS"            //–ü–∞—Ä–æ–ª—å —ç—Ç–æ–π —Å–µ—Ç–∏
#define NTP_ADDRESS             "pool.ntp.org"    //–ê–¥—Ä–µ—Å NTP —Å–µ—Ä–≤–µ—Ä–∞

#define OTA_HOSTNAME            "MeteoBot"        //–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏
#define OTA_PASSWORD            ""                //–ü–∞—Ä–æ–ª—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –≤–æ–∑–¥—É—Ö—É

#define DATA_FILE_NAME          "data.bin"        //–§–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏

#define BOT_TOKEN               ""                //–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ Telegram

#define USE_NARODMON            1                 //–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞—Ä–æ–¥–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
#define NARODMON_ADDRESS        "narodmon.ru"     //–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
#define NARODMON_PORT           8283              //–ü–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

#define GEO_LOCATION            ""                //–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è –±–æ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º)
#define GEO_HEIGHT              0                 //–í—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è
#define TIME_ZONE               3                 //–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞

#define SYNC_PERIOD             600000            //–ü–µ—Ä–∏–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º—Å.
#define UPDATE_PERIOD           1000              //–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞
#define SAVE_PERIOD             600000            //–ü–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –≤ –ø–∞–º—è—Ç—å
#define BOT_UPDATE_PERIOD       1000              //–ü–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
#define MAX_WAIT_RESPONSE_TIME  5000              //–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç NTP —Å–µ—Ä–≤–µ—Ä–∞
/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */

//–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
#define DATA_FILE_SIZE  (sizeof(unsigned long) * 5 + sizeof(WeatherData) * 73)

#include "FS.h"
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ArduinoOTA.h>

#include <GyverBME280.h>
#include <Forecaster.h>
#include <TimeLib.h>
#include <UniversalTelegramBot.h>

//–û–±—ä–µ–∫—Ç HTTP –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
ESP8266WebServer server;

//–°–æ–∑–¥–∞–µ–º Telegram –±–æ—Ç–∞
WiFiClientSecure securedClient;
UniversalTelegramBot bot(BOT_TOKEN, securedClient);

//–û–±—ä–µ–∫—Ç UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
WiFiUDP udp;

//–û–±—ä–µ–∫—Ç –¥–∞—Ç—á–∏–∫–∞
GyverBME280 sensor;

//–û–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
Forecaster cond;

//–ü–æ–≥–æ–¥–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫
const char* weatherStrings[] = {
  "–û—Ç–ª–∏—á–Ω–∞—è, —è—Å–Ω–æ",
  "–•–æ—Ä–æ—à–∞—è, —è—Å–Ω–æ",
  "–•–æ—Ä–æ—à–∞—è, –Ω–æ —É—Ö—É–¥—à–∞–µ—Ç—Å—è",
  "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∞—è, –Ω–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏–≤–µ–Ω—å",
  "–õ–∏–≤–Ω–∏, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–µ —É—Å—Ç–æ–π—á–∏–≤–æ–π",
  "–ü–∞—Å–º—É—Ä–Ω–∞—è, –æ–∂–∏–¥–∞—é—Ç—Å—è –¥–æ–∂–¥–∏",
  "–í—Ä–µ–º–µ–Ω–∞–º–∏ –¥–æ–∂–¥–∏, —É—Ö—É–¥—à–µ–Ω–∏–µ",
  "–í—Ä–µ–º–µ–Ω–∞–º–∏ –¥–æ–∂–¥–∏, –æ—á–µ–Ω—å –ø–ª–æ—Ö–∞—è, –ø–∞—Å–º—É—Ä–Ω–æ",
  "–î–æ–∂–¥–∏, –æ—á–µ–Ω—å –ø–ª–æ—Ö–∞—è, –ø–∞—Å–º—É—Ä–Ω–æ",
  "–®—Ç–æ—Ä–º–æ–≤–∞—è, –¥–æ–∂–¥–∏"
};

//–°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏
unsigned long getTime();

//–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
struct WeatherData {
  float temp = 0.0f;              //–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
  float pressure = 0.0f;          //–¢–µ–∫—É—â–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞
  float humidity = 0.0f;          //–¢–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
  float forecast = 0.0f;          //–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
  unsigned long measureTime = 0;  //–í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è

  /* –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å –¥–∞—Ç—á–∏–∫–∞ */
  void readFromSensor() {
    temp = sensor.readTemperature();
    pressure = sensor.readPressure();
    humidity = sensor.readHumidity();
    measureTime = getTime();
  }

  /* –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ */
  String toString() {
    return String(weatherStrings[constrain((int)round(forecast), 0, 9)]);
  }
};

WeatherData currentWeather;
WeatherData hourWeather[6];
WeatherData dayWeather[24];
WeatherData monthWeather[31];
WeatherData yearWeather[12];

unsigned long lastForecast = 0;
unsigned long lastHourMeasure = 0;
unsigned long lastDayMeasure = 0;
unsigned long lastMonthMeasure = 0;
unsigned long lastYearMeasure = 0;

unsigned long _syncTime = 0;      //UNIX –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
unsigned long _lastSyncTime = 0;  //–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

/* –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ NTP */
void syncTime() {
  static const uint16_t NTP_PACKET_SIZE = 48;   //–†–∞–∑–º–µ—Ä NTP –ø–∞–∫–µ—Ç–∞
  IPAddress ntpServerIp;                        //IP –∞–¥—Ä–µ—Å NTP —Å–µ—Ä–≤–µ—Ä–∞

  //–ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
  WiFi.hostByName(NTP_ADDRESS, ntpServerIp);

  //–ë—É—Ñ–µ—Ä, —Ö—Ä–∞–Ω—è—â–∏–π —Ç–µ–∫—É—â–∏–π –ø–∞–∫–µ—Ç
  byte packet[NTP_PACKET_SIZE];

  //–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
  packet[0] = 0b00100011; //–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏, –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –∏ —Ä–µ–∂–∏–º

  //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç
  udp.beginPacket(ntpServerIp, 123);
  udp.write(packet, NTP_PACKET_SIZE);
  udp.endPacket();

  //–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞
  unsigned long waitBeginTime = millis(); //–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è
  while (millis() - waitBeginTime < MAX_WAIT_RESPONSE_TIME) {
    int size = udp.parsePacket(); //–ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    if (size >= NTP_PACKET_SIZE) { //–ï—Å–ª–∏ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –ø–∞–∫–µ—Ç —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
      udp.read(packet, NTP_PACKET_SIZE);  //–ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç
      _syncTime = (unsigned long)packet[40] << 24;
      _syncTime |= (unsigned long)packet[41] << 16;
      _syncTime |= (unsigned long)packet[42] << 8;
      _syncTime |= (unsigned long)packet[43];
      _syncTime -= 2208988800UL;
      _lastSyncTime = millis();
      udp.flush();

      Serial.println(F("NTP response was received!"));
      Serial.print(F("Current time: "));
      Serial.println(_syncTime);
      return;
    }
  }

  Serial.println(F("Error! There is no NTP response"));
}

/* –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ */
unsigned long getTime() {
  if (millis() - _lastSyncTime > SYNC_PERIOD)
    syncTime();
  return _syncTime + (millis() - _lastSyncTime) / 1000;
}

/* –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ */
String getTimeAsString() {
  unsigned long time = getTime() + TIME_ZONE * SECS_PER_HOUR;
  
  char* buff = new char[17];
  sprintf_P(buff, (const char*)F("%02i.%02i.%04i %02i:%02i"), day(time), month(time), year(time), hour(time), minute(time));
  
  String str = String(buff);
  delete[] buff;
  
  return str;
}

/* –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –Ω–∞—Ä–æ–¥–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ */
void sendToNarodmon() {
  //IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
  IPAddress serverIp;

  //–ü–æ–ª—É—á–∞–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
  WiFi.hostByName(NARODMON_ADDRESS, serverIp);
  
  WiFiClient client;

  //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  if (!client.connect(serverIp, NARODMON_PORT)) {
    Serial.print(F("Error! Connection to "));
    Serial.print(NARODMON_ADDRESS);
    Serial.println(" failed");
    return;
  }

  Serial.print("Sending data to ");
  Serial.println(NARODMON_ADDRESS);

  client.print("#");
  client.println(WiFi.macAddress());
  client.print("#TEMPC#");
  client.println(currentWeather.temp, 2);
  client.print("#PRESS#");
  client.println(currentWeather.pressure, 2);
  client.print("#HUMID#");
  client.println(currentWeather.humidity, 2);
  client.print("##");

  client.stop();
}

/* –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º */
void sendStateMessage(String chatId) {
  bot.sendMessage(chatId,
    String(F("–ü–æ–≥–æ–¥–∞ –≤ ")) + GEO_LOCATION +
    String(F("\n\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ")) + String(currentWeather.temp, 1) + 
    String(F("¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ")) + String(currentWeather.humidity, 1) + 
    String(F("%\n‚è≤ –î–∞–≤–ª–µ–Ω–∏–µ: ")) + String(currentWeather.pressure * 0.01f, 1) +
    String(F(" –≥–ü–∞\n‚õÖ –ü–æ–≥–æ–¥–∞: ")) + currentWeather.toString() +
    String(F("\nüóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ")) + getTimeAsString() +
    String(F("\n\n–õ–æ–∫–∞–ª—å–Ω—ã–π IP: ")) + WiFi.localIP().toString()
  );
}

/* –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */
void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chatId = bot.messages[i].chat_id;
    String message = bot.messages[i].text;
    if (message == "/start" || message == "/get_weather") {
      sendStateMessage(chatId);
    } else {
      bot.sendMessage(chatId, F("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!"));
    }
  }
}

/* –ù–∞–π—Ç–∏ —Å—Ä–µ–¥–Ω–µ-–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ */
WeatherData averageWeather(WeatherData* a, int length) {
  WeatherData out;
  for (int i = 0; i < length; i++) {
    out.temp += a[i].temp;
    out.pressure += a[i].pressure;
    out.humidity += a[i].humidity;
    out.forecast += a[i].forecast;
  }
  out.temp /= length;
  out.pressure /= length;
  out.humidity /= length;
  out.forecast /= length;
  return out;
}

/* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ */
void handleGetInfo() {
  server.send(200, "application/json", String(F("{\"botName\":\"")) + bot.userName + String(F("\",\"geoLocation\":\"")) + GEO_LOCATION + String(F("\"}")));
}

/* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ */
void handleGetCurrentWeather() {
  server.send(200, "application/octet-stream", reinterpret_cast<uint8_t*>(&currentWeather), sizeof(currentWeather));
}

/* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∑–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Å */
void handleGetHourWeather() {
  server.send(200, "application/octet-stream", reinterpret_cast<uint8_t*>(&hourWeather), sizeof(hourWeather));
}

/* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å */
void handleGetDayWeather() {
  server.send(200, "application/octet-stream", reinterpret_cast<uint8_t*>(&dayWeather), sizeof(dayWeather));
}

/* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü */
void handleGetMonthWeather() {
  server.send(200, "application/octet-stream", reinterpret_cast<uint8_t*>(&monthWeather), sizeof(monthWeather));
}

/* –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ */
void handleGetYearWeather() {
  server.send(200, "application/octet-stream", reinterpret_cast<uint8_t*>(&yearWeather), sizeof(yearWeather));
}

/* –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π */
void loadWeatherData() {
  //–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!SPIFFS.exists(DATA_FILE_NAME))
    return;

  //–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
  File file = SPIFFS.open(DATA_FILE_NAME, "r");
  if (!file)  //–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    return;

  //–ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  char buffer[DATA_FILE_SIZE];
  file.readBytes(buffer, DATA_FILE_SIZE);
  file.close();

  //–°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  lastForecast = reinterpret_cast<unsigned long>(buffer);
  lastHourMeasure = reinterpret_cast<unsigned long>(buffer + sizeof(unsigned long));
  lastDayMeasure = reinterpret_cast<unsigned long>(buffer + sizeof(unsigned long) * 2);
  lastMonthMeasure = reinterpret_cast<unsigned long>(buffer + sizeof(unsigned long) * 3);
  lastYearMeasure = reinterpret_cast<unsigned long>(buffer + sizeof(unsigned long) * 4);

  //–ù–∞—Ö–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  void* currPtr = buffer + sizeof(unsigned long) * 5;

  //–ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –≤ –º–∞—Å—Å–∏–≤
  memcpy(hourWeather, currPtr, sizeof(WeatherData) * 6);
  currPtr += sizeof(WeatherData) * 6;

  memcpy(dayWeather, currPtr, sizeof(WeatherData) * 24);
  currPtr += sizeof(WeatherData) * 24;

  memcpy(monthWeather, currPtr, sizeof(WeatherData) * 31);
  currPtr += sizeof(WeatherData) * 31;

  memcpy(yearWeather, currPtr, sizeof(WeatherData) * 12);
}

/* –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π */
void saveWeatherData() {
  //–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
  File file = SPIFFS.open(DATA_FILE_NAME, "w");
  if (!file) {
    Serial.println(F("Error! Failed to open file to writing"));
    return;
  }

  //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  file.write(reinterpret_cast<byte*>(&lastForecast), sizeof(unsigned long));
  file.write(reinterpret_cast<byte*>(&lastHourMeasure), sizeof(unsigned long));
  file.write(reinterpret_cast<byte*>(&lastDayMeasure), sizeof(unsigned long));
  file.write(reinterpret_cast<byte*>(&lastMonthMeasure), sizeof(unsigned long));
  file.write(reinterpret_cast<byte*>(&lastYearMeasure), sizeof(unsigned long));
  file.write(reinterpret_cast<byte*>(hourWeather), sizeof(hourWeather));
  file.write(reinterpret_cast<byte*>(dayWeather), sizeof(dayWeather));
  file.write(reinterpret_cast<byte*>(monthWeather), sizeof(monthWeather));
  file.write(reinterpret_cast<byte*>(yearWeather), sizeof(yearWeather));

  //–ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  file.close();
}

void setup() {
  Serial.begin(115200);
  Serial.println();

  //–ò–Ω–∏—Ç–∏–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—á–∏–∫
  if (!sensor.begin()) {
    Serial.println(F("Can not access to the BME280 sensor. Please check wirings"));
    abort();
  }

  //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è
  cond.setH(GEO_HEIGHT);

  //–ò–Ω–∏—Ç–∏–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
  SPIFFS.begin();
  
  //–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
  loadWeatherData();

  //–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WiFi
  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  //–û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  //–ó–∞–ø—É—Å–∫–∞–µ–º Web-—Å–µ—Ä–≤–µ—Ä
  server.on("/getInfo", handleGetInfo);
  server.on("/getCurrentWeather", handleGetCurrentWeather);
  server.on("/getHourWeather", handleGetHourWeather);
  server.on("/getDayWeather", handleGetDayWeather);
  server.on("/getMonthWeather", handleGetMonthWeather);
  server.on("/getYearWeather", handleGetYearWeather);
  server.serveStatic("/", SPIFFS, "/index.html");
  server.serveStatic("/script.js", SPIFFS, "/script.js");
  server.begin();

  //–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è
  udp.begin(123);
  syncTime();

  //–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ
  securedClient.setInsecure();
  if (bot.getMe()) {
    Serial.print("Telegram bot started @");
    Serial.println(bot.userName);
  } else {
    Serial.println("Error was caused while starting Telegram bot");
  }

  //–£–∫–∞–∑—ã–≤–∞–µ–º –±–æ—Ç—É –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã
  bot.setMyCommands(F("[{\"command\":\"get_weather\", \"description\":\"–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\"}]"));

  //–°—Ä–∞–∑—É –∂–µ —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É
  currentWeather.readFromSensor();
  
  //–ò–Ω–∏—Ç–∏–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑–¥—É—Ö—É
  ArduinoOTA.setHostname(OTA_HOSTNAME);
  ArduinoOTA.setPassword(OTA_PASSWORD);
  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH)
      type = "sketch";
    else
      type = "filesystem";
    
    SPIFFS.end();
    server.close();
    udp.stop();
    
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
    ESP.restart();
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
}

void loop() {
  server.handleClient();
  ArduinoOTA.handle();

  //–û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞
  static unsigned long botTimer = 0;
  if (millis() - botTimer > BOT_UPDATE_PERIOD) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    botTimer = millis();
  }

  static unsigned long saveTime = 0;
  if (millis() - saveTime > SAVE_PERIOD) {
    //–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
    saveWeatherData();
    saveTime = millis();
  }

  unsigned long currentTime = getTime();
  
  //–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞
  static unsigned long updateTimer = 0;
  if (millis() - updateTimer > UPDATE_PERIOD) {
    updateTimer = millis();
    currentWeather.readFromSensor();
    
    //–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
    if (currentTime - lastForecast > 1800) {
      cond.setMonth(month(currentTime));
      cond.addP(currentWeather.pressure, currentWeather.temp);
      currentWeather.forecast = cond.getCast();
      lastForecast = currentTime;
    }
  }
  
  //–û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ —á–∞—Å
  if (currentTime - lastHourMeasure > 600) {
    //–°–º–µ—â–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
    for (byte i = 5; i >= 1; i--)
      hourWeather[i] = hourWeather[i - 1];

    //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
    hourWeather[0] = currentWeather;

    lastHourMeasure = currentTime;

    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –Ω–∞—Ä–æ–¥–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    sendToNarodmon();
  }

  //..–∑–∞ —Å—É—Ç–∫–∏
  if (hour(lastDayMeasure) != hour(currentTime)) {
    //–°–º–µ—â–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
    for (byte i = 23; i >= 1; i--)
      dayWeather[i] = dayWeather[i - 1];

    //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
    dayWeather[0] = averageWeather(hourWeather, 6);
    dayWeather[0].measureTime = currentTime;

    lastDayMeasure = currentTime;
  }

  //..–∑–∞ –º–µ—Å—è—Ü
  if (day(lastMonthMeasure) != day(currentTime)) {
    //–°–º–µ—â–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
    for (byte i = 30; i >= 1; i--)
      monthWeather[i] = monthWeather[i - 1];

    //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
    monthWeather[0] = averageWeather(dayWeather, 24);
    monthWeather[0].measureTime = currentTime;

    lastMonthMeasure = currentTime;
  }

  //..–∑–∞ –≥–æ–¥
  if (month(lastYearMeasure) != month(currentTime)) {
    //–°–º–µ—â–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
    for (byte i = 11; i >= 1; i--)
      yearWeather[i] = yearWeather[i - 1];

    //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
    yearWeather[0] = averageWeather(monthWeather, 31);
    yearWeather[0].measureTime = currentTime;

    lastYearMeasure = currentTime;
  }
}
